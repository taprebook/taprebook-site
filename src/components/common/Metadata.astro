---
import merge from 'lodash.merge';
import { AstroSeo } from '@astrolib/seo';
import type { Props as AstroSeoProps } from '@astrolib/seo';

import { SITE, METADATA, I18N } from 'astrowind:config';
import type { MetaData } from '~/types';
import { getCanonical } from '~/utils/permalinks';

export interface Props extends MetaData {
  dontUseTitleTemplate?: boolean;
}

const {
  title,
  ignoreTitleTemplate = false,
  canonical = String(getCanonical(String(Astro.url.pathname))),
  robots = {},
  description,
  openGraph = {},
  twitter = {},
} = Astro.props;

// helper â†’ make absolute using Astro.site
const toAbs = (u?: string) =>
  u && !u.startsWith('http') ? new URL(u, Astro.site).toString() : u;

// Build merged SEO props
const baseSeoProps: AstroSeoProps = merge(
  {
    title: '',
    titleTemplate: '%s',
    canonical,
    noindex: true,
    nofollow: true,
    description: undefined,
    openGraph: {
      url: canonical,
      site_name: SITE?.name,
      images: [],
      locale: I18N?.language || 'en',
      type: 'website',
    },
    twitter: {
      cardType: openGraph?.images?.length ? 'summary_large_image' : 'summary',
    },
  },
  {
    title: METADATA?.title?.default,
    titleTemplate: METADATA?.title?.template,
    noindex: typeof METADATA?.robots?.index !== 'undefined' ? !METADATA.robots.index : undefined,
    nofollow: typeof METADATA?.robots?.follow !== 'undefined' ? !METADATA.robots.follow : undefined,
    description: METADATA?.description,
    openGraph: METADATA?.openGraph,
    twitter: METADATA?.twitter,
  },
  {
    title,
    titleTemplate: ignoreTitleTemplate ? '%s' : undefined,
    canonical,
    noindex: typeof robots?.index !== 'undefined' ? !robots.index : undefined,
    nofollow: typeof robots?.follow !== 'undefined' ? !robots.follow : undefined,
    description,
    openGraph: { url: canonical, ...openGraph },
    twitter,
  }
);

// Ensure default OG/Twitter images (absolute URLs)
const DEFAULT_OG_REL = '/images/taprebook-og.png';
const DEFAULT_OG = toAbs(DEFAULT_OG_REL);

const hasOGImage =
  Array.isArray(baseSeoProps?.openGraph?.images) && baseSeoProps.openGraph.images.length > 0;

const ogImages = (hasOGImage
  ? baseSeoProps.openGraph.images
  : [{ url: DEFAULT_OG!, width: 1200, height: 630 }]
).map((img: any) => ({
  ...img,
  url: toAbs(img.url) || DEFAULT_OG!,
}));

const twitterImage =
  (baseSeoProps as any)?.twitter?.image
    ? toAbs((baseSeoProps as any).twitter.image)
    : (ogImages[0] as any)?.url || DEFAULT_OG;

const seoProps: AstroSeoProps = {
  ...baseSeoProps,
  openGraph: {
    ...baseSeoProps.openGraph,
    images: ogImages,
  },
  twitter: {
    ...baseSeoProps.twitter,
    cardType: 'summary_large_image',
    image: twitterImage,
  },
};
---

<AstroSeo {...seoProps} />
