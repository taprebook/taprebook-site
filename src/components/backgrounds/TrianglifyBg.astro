---
/* Dynamic low-poly “icy triangles” background that:
   - Loads Trianglify only in the browser via dynamic import (no SSR issues)
   - Resizes for DPR and viewport changes
   - Very subtle hue drift to keep it alive without distraction
*/
---

<style>
  .tri-bg-wrap {
    position: fixed;
    inset: 0;
    z-index: -50;
    pointer-events: none;
  }
  .tri-bg-wrap canvas {
    width: 100%;
    height: 100%;
    display: block;
  }
</style>

<div class="tri-bg-wrap">
  <canvas id="tri-bg"></canvas>
</div>

<script>
  // run only in browser
  if (typeof window !== 'undefined') {
    (async () => {
      // Dynamic import avoids any SSR/bundler edge cases
      const { default: trianglify } = await import('trianglify');

      const canvas = document.getElementById('tri-bg');
      if (!canvas) return;

      const ctx = canvas.getContext('2d');

      function sizeCanvas() {
        const dpr = window.devicePixelRatio || 1;
        canvas.width = Math.floor(window.innerWidth * dpr);
        canvas.height = Math.floor(window.innerHeight * dpr);
        canvas.style.width = '100%';
        canvas.style.height = '100%';
        ctx.setTransform(dpr, 0, 0, dpr, 0, 0);
      }

      let hue = 205;   // blue family
      let raf;

      function palette() {
        // cool, icy ramp; very subtle lightness steps
        return Array.from({ length: 6 }, (_, i) => `hsl(${(hue + i * 5) % 360} 45% ${92 - i * 8}%)`);
      }

      function render() {
        const width = window.innerWidth;
        const height = window.innerHeight;

        const pattern = trianglify({
          width,
          height,
          cellSize: Math.max(80, Math.min(140, Math.floor(width / 12))), // big elegant facets
          variance: 0.55,
          xColors: palette(),
          yColors: 'match',
          fill: true,
          strokeOpacity: 0.08,
          strokeWidth: 1,
        });

        pattern.toCanvas(canvas);
      }

      function animate() {
        hue = (hue + 0.02) % 360; // extremely slow drift
        render();
        raf = requestAnimationFrame(animate);
      }

      function onResize() {
        sizeCanvas();
        render();
      }

      // init
      sizeCanvas();
      render();
      raf = requestAnimationFrame(animate);
      window.addEventListener('resize', onResize);

      // cleanup on navigation (Astro)
      addEventListener('astro:before-preload', () => {
        cancelAnimationFrame(raf);
        window.removeEventListener('resize', onResize);
      });
    })();
  }
</script>
